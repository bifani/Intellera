proc printto log="C:\Users\r.blaco\Desktop\scripts Modello predittivo 20220706\logs\combinazioni_SPEGNIMENTI.txt" new;
run;

OPTIONS MPRINT;
OPTIONS COMPRESS =YES;

/* libname dei dati iniziali di input, dati forniti dal ministero*/
libname  INPUT "T:\202204_modello\Input Stratificazione";
%let INPUT = INPUT;

/* La libname temporanea si chiamer� "temp", al momento impostata sulla work*/
libname  TEMP "T:\202204_modello\Output camp\temp";
%let TEMP = TEMP;

/* La Libname che conterr� le tabelle create la chiamo LIBRARY */
LIBNAME OUTPUT "T:\202204_modello\Output camp\output";
%let OUTPUT = OUTPUT;

/* La Libname che contiene la tabella anagrafica del campione di 4mln*/
libname camp "T:\202204_modello\Output camp";

%global check_indicatore;

%let dt_riferimento = "31122019";

%macro COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=, SOGLIA=, reg=&reg);
	%LET i=0;
	%LET MINFREQ=0;
	OPTIONS COMPRESS=YES;

	PROC SQL;
		CREATE TABLE temp.INFO2A_&reg AS
		SELECT
			A.*,
			B.RANKING
		FROM temp.ID_PAT_CRONICI_&reg AS A
		LEFT JOIN input.area_patologica2 AS B
			ON A.ID_PATOLOGIA=B.ID_PATOLOGIA
				and a.id_classificazione = b.id_classificazione
		ORDER BY A.ID_ANONIMO, B.RANKING
	;QUIT;

	DATA TEMP.INFO2B_1_&reg (keep=ID_CLASSIFICAZIONE ID_ANONIMO COMBINAZIONE);
	FORMAT COMBINAZIONE $ 400.;
	SET TEMP.INFO2A_&reg(rename=(ID_PATOLOGIA=ID_PAT));
	BY ID_ANONIMO;
		RETAIN COMBINAZIONE;
		LENGTH COMBINAZIONE $ 400.;
		IF FIRST.ID_ANONIMO THEN COMBINAZIONE=' ';
		COMBINAZIONE= CATX('|',trim(COMBINAZIONE),ID_PAT);
		IF LAST.ID_ANONIMO THEN OUTPUT;
	RUN;

	proc sql;
		create table TEMP.INFO2B_&reg as select
			a.*,
			b.eta,
			CASE WHEN b.ETA GE 85 AND b.ETA NE 999 THEN '>=85'
				WHEN b.ETA GE  0 AND b.ETA LT 15 THEN '<=14'
				WHEN b.ETA GE 15 AND b.ETA LT 45 THEN '15-44'
				WHEN b.ETA GE 45 AND b.ETA LT 65 THEN '45-64'
				WHEN b.ETA GE 65 AND b.ETA LT 75 THEN '65-74'
				WHEN b.ETA GE 75 AND b.ETA LT 85 THEN '75-84'
				ELSE 'NA' END AS CLASSE_ETA,
			b.sesso,
 			b.COSTO_FARMA,
			b.COSTO_AMB,
			B.COSTO_SDO,
			B.COSTO_HOSPICE,
			B.COSTO_FARMA_TERR,
			B.COSTO_PS,
			b.VAL_TOT
			from TEMP.INFO2B_1_&reg a
			left join temp.COSTO_TOT_&reg b
			on a.id_anonimo = b.id_anonimo;
	quit;

	PROC SQL;
		CREATE TABLE &TEMP..COMBINAZIONI_PRE1_A_&i._&reg AS
		SELECT
			COMBINAZIONE AS COMBINAZIONE_INI,
			SESSO,
			CLASSE_ETA,
			COUNT(ID_ANONIMO) AS FREQ,
			COUNT(COMBINAZIONE_INI,'|')+1 AS N_PAT,
				/*SUM(FL_DECESSO) AS NUM_DECESSI,*/
/*SOMMA*/
			coalesce(SUM(COSTO_SDO),0) AS SUM_RICOVERI,
			coalesce(SUM(COSTO_HOSPICE),0) AS SUM_HOSPICE,
			coalesce(SUM(COSTO_PS),0) AS SUM_PS,
			coalesce(SUM(COSTO_FARMA_TERR),0) AS SUM_FARMA_TERR,
			coalesce(SUM(COSTO_AMB),0) AS SUM_VAL_AMB,
			coalesce(SUM(COSTO_FARMA),0) AS SUM_COSTO_FARMA,
			coalesce(SUM(VAL_TOT),0) AS SUM_VAL,

/*LOG*/
			coalesce(SUM(LOG(COSTO_AMB)),0) AS SUM_LOG_VAL_AMB,
			coalesce(SUM(LOG(COSTO_FARMA)), 0) AS SUM_LOG_COSTO_FARMA,
			coalesce(SUM(LOG(COSTO_SDO)),0) AS SUM_LOG_RICOVERI,
			coalesce(SUM(LOG(COSTO_HOSPICE)),0) AS SUM_LOG_HOSPICE,
			coalesce(SUM(LOG(COSTO_PS)),0) AS SUM_LOG_PS,
			coalesce(SUM(LOG(COSTO_FARMA_TERR)),0) AS SUM_LOG_FARMA_TERR,
			coalesce(SUM(LOG(VAL_TOT)),0) AS SUM_LOG_VAL,

/*SQUARE*/
			coalesce(SUM(COSTO_SDO**2),0) AS SUM_SQUARE_RICOVERI,
			coalesce(SUM(COSTO_HOSPICE**2),0) AS SUM_SQUARE_HOSPICE,
			coalesce(SUM(COSTO_PS**2),0) AS SUM_SQUARE_PS,
			coalesce(SUM(COSTO_FARMA_TERR**2),0) AS SUM_SQUARE_FARMA_TERR,
			coalesce(sum(COSTO_AMB**2),0) AS SUM_SQUARE_VAL_AMB,
            coalesce(sum(COSTO_FARMA**2),0) AS SUM_SQUARE_COSTO_FARMA,
			coalesce(sum(VAL_TOT**2),0) AS SUM_SQUARE_VAL,

/*LOG-SQUARE*/
			coalesce(SUM(LOG(COSTO_AMB)**2),0) AS SUM_SQUARE_LOG_VAL_AMB,
			coalesce(SUM(LOG(COSTO_FARMA)**2),0) AS SUM_SQUARE_LOG_COSTO_FARMA,
			coalesce(SUM(LOG(COSTO_SDO)**2),0) AS SUM_SQUARE_LOG_RICOVERI,
			coalesce(SUM(LOG(COSTO_HOSPICE)**2),0) AS SUM_SQUARE_LOG_HOSPICE,
			coalesce(SUM(LOG(COSTO_PS)**2),0) AS SUM_SQUARE_LOG_PS,
			coalesce(SUM(LOG(COSTO_FARMA_TERR)**2),0) AS SUM_SQUARE_LOG_FARMA_TERR,
			coalesce(SUM(LOG(VAL_TOT)**2),0) AS SUM_SQUARE_LOG_VAL
		FROM TEMP.INFO2B_&reg
		GROUP BY COMBINAZIONE, SESSO, CLASSE_ETA
		ORDER BY COMBINAZIONE, SESSO, CLASSE_ETA
	;QUIT;

	*SPEGNIMENTI;

	DATA &TEMP..COMBINAZIONI_PRE2_A_&i._&reg;
	SET &TEMP..COMBINAZIONI_PRE1_A_&i._&reg;
	COMBINAZIONE_SPEGN = cats(COMBINAZIONE_INI,'|');/*Funzione sas "tranwrd" � usata per eliminare gli spegnimenti*/
	/*spegnimenti clinici*/
	if find(COMBINAZIONE_SPEGN,'DI01')>0 and find(COMBINAZIONE_SPEGN,'DI02')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'DI01|','')); end;
	if find(COMBINAZIONE_SPEGN,'DI03')>0 and find(COMBINAZIONE_SPEGN,'DI04')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'DI03|','')); end;
	if find(COMBINAZIONE_SPEGN,'NF01')>0 and find(COMBINAZIONE_SPEGN,'NF02')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'NF01|','')); end;
	if find(COMBINAZIONE_SPEGN,'ON02')>0 and find(COMBINAZIONE_SPEGN,'ON01')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'ON02|','')); end;
	/*spegnimenti per recuperare tutti i monopatologici*/
	if find(COMBINAZIONE_SPEGN,'PN01')>0 and find(COMBINAZIONE_SPEGN,'PN05')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'PN01|','')); end;
	if find(COMBINAZIONE_SPEGN,'PN02')>0 and find(COMBINAZIONE_SPEGN,'PN05')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'PN02|','')); end;
	if find(COMBINAZIONE_SPEGN,'ON04')>0 and find(COMBINAZIONE_SPEGN,'ON06')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'ON04|','')); end;
	if find(COMBINAZIONE_SPEGN,'ON07')>0 and find(COMBINAZIONE_SPEGN,'ON06')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'ON07|','')); end;
	if find(COMBINAZIONE_SPEGN,'ED11')>0 and find(COMBINAZIONE_SPEGN,'ED15')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'ED11|','')); end;

	/*
	if find(COMBINAZIONE_SPEGN,'K07B3')>0 and find(COMBINAZIONE_SPEGN,'K12I')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'K12I|','')); end;
	if find(COMBINAZIONE_SPEGN,'K07B3')>0 and find(COMBINAZIONE_SPEGN,'K07A')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'K07A|','')); end;
	if find(COMBINAZIONE_SPEGN,'K06B2')>0 and find(COMBINAZIONE_SPEGN,'K06B1')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'K06B1|','')); end;
	if find(COMBINAZIONE_SPEGN,'K06B2')>0 and find(COMBINAZIONE_SPEGN,'K12I')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'K12I|','')); end;
	if find(COMBINAZIONE_SPEGN,'K06A2')>0 and find(COMBINAZIONE_SPEGN,'K06A1')>0 then do; COMBINAZIONE_SPEGN = compress(tranwrd(COMBINAZIONE_SPEGN,'K06A1|','')); end;
	*/
	run;

PROC SQL;
		CREATE TABLE &TEMP..COMBINAZIONI_A_&i._&reg AS
		SELECT
			SUBSTR(COMBINAZIONE_SPEGN, 1, LENGTH(COMBINAZIONE_SPEGN)-1)AS COMBINAZIONE_OLD,
			SESSO,
			CLASSE_ETA,
			SUM(FREQ) AS FREQ,
			COUNT(COMBINAZIONE_SPEGN,'|') AS N_PAT,

			coalesce(SUM(SUM_VAL_AMB),0) AS SUM_VAL_AMB,
			coalesce(SUM(SUM_RICOVERI),0) AS SUM_RICOVERI,
			coalesce(SUM(SUM_HOSPICE),0) AS SUM_HOSPICE,
			coalesce(SUM(SUM_PS),0) AS SUM_PS,
			coalesce(SUM(SUM_FARMA_TERR),0) AS SUM_FARMA_TERR,
			coalesce(SUM(SUM_COSTO_FARMA),0) AS SUM_COSTO_FARMA,
			coalesce(SUM(SUM_VAL),0) AS SUM_VAL,


			coalesce(SUM(SUM_LOG_VAL_AMB),0) AS SUM_LOG_VAL_AMB,
			coalesce(SUM(SUM_LOG_RICOVERI),0) AS SUM_LOG_RICOVERI,
			coalesce(SUM(SUM_LOG_HOSPICE),0) AS SUM_LOG_HOSPICE,
			coalesce(SUM(SUM_LOG_PS),0) AS SUM_LOG_PS,
			coalesce(SUM(SUM_LOG_FARMA_TERR),0) AS SUM_LOG_FARMA_TERR,
			coalesce(SUM(SUM_LOG_COSTO_FARMA), 0) AS SUM_LOG_COSTO_FARMA,
			coalesce(SUM(SUM_LOG_VAL), 0) AS SUM_LOG_VAL,


			coalesce(sum(SUM_SQUARE_VAL_AMB), 0) AS SUM_SQUARE_VAL_AMB,
            coalesce(sum(SUM_SQUARE_RICOVERI), 0) AS SUM_SQUARE_RICOVERI,
			coalesce(sum(SUM_SQUARE_HOSPICE), 0) AS SUM_SQUARE_HOSPICE,
			coalesce(sum(SUM_SQUARE_PS), 0) AS SUM_SQUARE_PS,
			coalesce(sum(SUM_SQUARE_FARMA_TERR), 0) AS SUM_SQUARE_FARMA_TERR,
            coalesce(sum(SUM_SQUARE_COSTO_FARMA), 0) AS SUM_SQUARE_COSTO_FARMA,
			coalesce(sum(SUM_SQUARE_VAL), 0) AS SUM_SQUARE_VAL,


			coalesce(SUM(SUM_SQUARE_LOG_VAL_AMB), 0) AS SUM_SQUARE_LOG_VAL_AMB,
			coalesce(sum(SUM_SQUARE_LOG_RICOVERI), 0) AS SUM_SQUARE_LOG_RICOVERI,
			coalesce(sum(SUM_SQUARE_LOG_HOSPICE), 0) AS SUM_SQUARE_LOG_HOSPICE,
			coalesce(sum(SUM_SQUARE_LOG_PS), 0) AS SUM_SQUARE_LOG_PS,
			coalesce(sum(SUM_SQUARE_LOG_FARMA_TERR), 0) AS SUM_SQUARE_LOG_FARMA_TERR,
			coalesce(SUM(SUM_SQUARE_LOG_COSTO_FARMA), 0) AS SUM_SQUARE_LOG_COSTO_FARMA,
			coalesce(SUM(SUM_SQUARE_LOG_VAL),0) AS SUM_SQUARE_LOG_VAL
		FROM &TEMP..COMBINAZIONI_PRE2_A_&i._&reg
		GROUP BY COMBINAZIONE_SPEGN, SESSO, CLASSE_ETA
		ORDER BY COMBINAZIONE_SPEGN, SESSO, CLASSE_ETA
	;QUIT;

	PROC DELETE DATA=
		&TEMP..COMBINAZIONI_PRE1_A_&i._&reg
		&TEMP..COMBINAZIONI_PRE2_A_&i._&reg ;
	RUN;

	%DO %UNTIL (&MINFREQ>=&SOGLIA OR &MAXPAT=1);

		PROC SQL NOPRINT;
		SELECT MAX(N_PAT)
			INTO :MAXPAT
			FROM &TEMP..COMBINAZIONI_A_&i._&reg
			where N_PAT >1 & FREQ < &SOGLIA.
		;quit;
		%PUT MAXPAT=&MAXPAT;

		%LET dsid=%SYSFUNC(OPEN(TEMP.COMBINAZIONI_A_&i._&reg));
		%LET nobs=%SYSFUNC(ATTRN(&dsid.,NOBS));
		%LET rc=%SYSFUNC(CLOSE(&dsid.));

		%IF &nobs. EQ 0 OR &nobs. EQ . %THEN %RETURN;

		%LET j=%eval(&i+1);

		DATA &TEMP..COMBINAZIONI_B_&j._&reg;
		SET &TEMP..COMBINAZIONI_A_&i._&reg;
		RETAIN COMBINAZIONE FIND;
		LENGTH COMBINAZIONE $400.;
		FIND=FIND(COMBINAZIONE_OLD,'|',-length(COMBINAZIONE_OLD));
		IF N_PAT >1 & FREQ < &SOGLIA. & N_PAT=&MAXPAT THEN COMBINAZIONE=SUBSTR(COMBINAZIONE_OLD, 1, FIND-1);
		ELSE COMBINAZIONE=COMBINAZIONE_OLD;
		DROP COMBINAZIONE_OLD;
		RUN;

	PROC SQL;
		CREATE TABLE &TEMP..COMBINAZIONI_A_&j._&reg AS
		SELECT
			COMBINAZIONE AS COMBINAZIONE_OLD,
			SESSO,
			CLASSE_ETA,
			sum(freq) AS FREQ,
			COUNT(COMBINAZIONE_OLD,'|')+1 AS N_PAT,

			coalesce(SUM(SUM_VAL_AMB),0) AS SUM_VAL_AMB,
			coalesce(SUM(SUM_RICOVERI),0) AS SUM_RICOVERI,
			coalesce(SUM(SUM_HOSPICE),0) AS SUM_HOSPICE,
			coalesce(SUM(SUM_PS),0) AS SUM_PS,
			coalesce(SUM(SUM_FARMA_TERR),0) AS SUM_FARMA_TERR,
			coalesce(SUM(SUM_COSTO_FARMA),0) AS SUM_COSTO_FARMA,
			coalesce(SUM(SUM_VAL),0) AS SUM_VAL,


			coalesce(SUM(SUM_LOG_VAL_AMB),0) AS SUM_LOG_VAL_AMB,
			coalesce(SUM(SUM_LOG_RICOVERI),0) AS SUM_LOG_RICOVERI,
			coalesce(SUM(SUM_LOG_HOSPICE),0) AS SUM_LOG_HOSPICE,
			coalesce(SUM(SUM_LOG_PS),0) AS SUM_LOG_PS,
			coalesce(SUM(SUM_LOG_FARMA_TERR),0) AS SUM_LOG_FARMA_TERR,
			coalesce(SUM(SUM_LOG_COSTO_FARMA), 0) AS SUM_LOG_COSTO_FARMA,
			coalesce(SUM(SUM_LOG_VAL), 0) AS SUM_LOG_VAL,


			coalesce(sum(SUM_SQUARE_VAL_AMB), 0) AS SUM_SQUARE_VAL_AMB,
            coalesce(sum(SUM_SQUARE_RICOVERI), 0) AS SUM_SQUARE_RICOVERI,
			coalesce(sum(SUM_SQUARE_HOSPICE), 0) AS SUM_SQUARE_HOSPICE,
			coalesce(sum(SUM_SQUARE_PS), 0) AS SUM_SQUARE_PS,
			coalesce(sum(SUM_SQUARE_FARMA_TERR), 0) AS SUM_SQUARE_FARMA_TERR,
            coalesce(sum(SUM_SQUARE_COSTO_FARMA), 0) AS SUM_SQUARE_COSTO_FARMA,
			coalesce(sum(SUM_SQUARE_VAL), 0) AS SUM_SQUARE_VAL,


			coalesce(SUM(SUM_SQUARE_LOG_VAL_AMB), 0) AS SUM_SQUARE_LOG_VAL_AMB,
			coalesce(sum(SUM_SQUARE_LOG_RICOVERI), 0) AS SUM_SQUARE_LOG_RICOVERI,
			coalesce(sum(SUM_SQUARE_LOG_HOSPICE), 0) AS SUM_SQUARE_LOG_HOSPICE,
			coalesce(sum(SUM_SQUARE_LOG_PS), 0) AS SUM_SQUARE_LOG_PS,
			coalesce(sum(SUM_SQUARE_LOG_FARMA_TERR), 0) AS SUM_SQUARE_LOG_FARMA_TERR,
			coalesce(SUM(SUM_SQUARE_LOG_COSTO_FARMA), 0) AS SUM_SQUARE_LOG_COSTO_FARMA,
			coalesce(SUM(SUM_SQUARE_LOG_VAL),0) AS SUM_SQUARE_LOG_VAL
		FROM &TEMP..COMBINAZIONI_B_&j._&reg
		GROUP BY COMBINAZIONE_OLD, SESSO, CLASSE_ETA
		ORDER BY COMBINAZIONE, SESSO, CLASSE_ETA
	;QUIT;

		PROC SQL NOPRINT;
		SELECT MIN(FREQ)
			INTO :MINFREQ
			FROM &TEMP..COMBINAZIONI_A_&j._&reg
			WHERE N_PAT>1
		;
		quit;
		%PUT MINFREQ=&MINFREQ;

	PROC DELETE DATA=
		&TEMP..COMBINAZIONI_A_&i._&reg
		&TEMP..COMBINAZIONI_B_&j._&reg ;
	RUN;

		%LET i=&j;

		PROC SQL NOPRINT;
		SELECT MAX(N_PAT)
			INTO :MAXPAT
			FROM &TEMP..COMBINAZIONI_A_&i._&reg
		;
		quit;
		%PUT MAXPAT=&MAXPAT;

	%END;

	data &TEMP..COMBINAZIONI_FIN_SPEGN_&ID_CLASSIFICAZIONE._&reg;
	set &TEMP..COMBINAZIONI_A_&j._&reg;
	rename combinazione_old = COMBINAZIONE;
	where freq GE &SOGLIA.;
	REGIONE="&&reg.";
	run;

	PROC DELETE DATA=&TEMP..COMBINAZIONI_A_&j._&reg
					&TEMP..INFO2A_&reg
					&TEMP..INFO2B_&reg;
	RUN;

%MEND;


%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=010);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=020);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=030);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=041);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=042);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=050);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=060);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=070);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=080);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=090);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=100);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=110);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=120);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=130);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=140);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=150);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=160);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=170);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=180);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=190);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 0, reg=200);

data TEMP.COMBINAZIONI_FIN_TOTALE_ZERO;
set TEMP.COMBINAZIONI_FIN_SPEGN_9_010 TEMP.COMBINAZIONI_FIN_SPEGN_9_020 TEMP.COMBINAZIONI_FIN_SPEGN_9_030 TEMP.COMBINAZIONI_FIN_SPEGN_9_041
TEMP.COMBINAZIONI_FIN_SPEGN_9_042
TEMP.COMBINAZIONI_FIN_SPEGN_9_050 TEMP.COMBINAZIONI_FIN_SPEGN_9_060 TEMP.COMBINAZIONI_FIN_SPEGN_9_070 TEMP.COMBINAZIONI_FIN_SPEGN_9_080
TEMP.COMBINAZIONI_FIN_SPEGN_9_090 TEMP.COMBINAZIONI_FIN_SPEGN_9_100 TEMP.COMBINAZIONI_FIN_SPEGN_9_110 TEMP.COMBINAZIONI_FIN_SPEGN_9_120
TEMP.COMBINAZIONI_FIN_SPEGN_9_130 TEMP.COMBINAZIONI_FIN_SPEGN_9_140 TEMP.COMBINAZIONI_FIN_SPEGN_9_150 TEMP.COMBINAZIONI_FIN_SPEGN_9_160
TEMP.COMBINAZIONI_FIN_SPEGN_9_170 TEMP.COMBINAZIONI_FIN_SPEGN_9_180 TEMP.COMBINAZIONI_FIN_SPEGN_9_190 TEMP.COMBINAZIONI_FIN_SPEGN_9_200;
run;


data TEMP.COMBINAZIONI_FINALE;
set TEMP.COMBINAZIONI_FIN_TOTALE_ZERO;
rename SUM_FARMA_TERR=SUM_FAR SUM_LOG_FARMA_TERR=SUM_LOG_FAR SUM_SQUARE_FARMA_TERR=SUM_SQUARE_FAR SUM_SQUARE_LOG_FARMA_TERR=SUM_SQUARE_LOG_FAR;
run;

proc export data =TEMP.COMBINAZIONI_FINALE
	outfile = "T:\202204_modello\Output camp\tabelle_analisi_codice\ANALISI\COMBINAZIONI_SPEGNIMENTI_SOGLIA0.xlsx"
	dbms = xlsx
	replace;
run;

/*Soglia = 3*/
/*

%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=010);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=020);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=030);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=041);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=042);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=050);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=060);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=070);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=080);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=090);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=100);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=110);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=120);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=130);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=140);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=150);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=160);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=170);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=180);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=190);
%COMBINAZIONI_SPEGN(ID_CLASSIFICAZIONE=9,soglia = 3, reg=200);

data TEMP.COMBINAZIONI_FIN_TOTALE;
set TEMP.COMBINAZIONI_FIN_SPEGN_9_010 TEMP.COMBINAZIONI_FIN_SPEGN_9_020 TEMP.COMBINAZIONI_FIN_SPEGN_9_030 TEMP.COMBINAZIONI_FIN_SPEGN_9_041
TEMP.COMBINAZIONI_FIN_SPEGN_9_042
TEMP.COMBINAZIONI_FIN_SPEGN_9_050 TEMP.COMBINAZIONI_FIN_SPEGN_9_060 TEMP.COMBINAZIONI_FIN_SPEGN_9_070 TEMP.COMBINAZIONI_FIN_SPEGN_9_080
TEMP.COMBINAZIONI_FIN_SPEGN_9_090 TEMP.COMBINAZIONI_FIN_SPEGN_9_100 TEMP.COMBINAZIONI_FIN_SPEGN_9_110 TEMP.COMBINAZIONI_FIN_SPEGN_9_120
TEMP.COMBINAZIONI_FIN_SPEGN_9_130 TEMP.COMBINAZIONI_FIN_SPEGN_9_140 TEMP.COMBINAZIONI_FIN_SPEGN_9_150 TEMP.COMBINAZIONI_FIN_SPEGN_9_160
TEMP.COMBINAZIONI_FIN_SPEGN_9_170 TEMP.COMBINAZIONI_FIN_SPEGN_9_180 TEMP.COMBINAZIONI_FIN_SPEGN_9_190 TEMP.COMBINAZIONI_FIN_SPEGN_9_200;
run;

proc export data = TEMP.COMBINAZIONI_FIN_TOTALE
	outfile = "T:\202204_modello\Output camp\tabelle_analisi_codice\ANALISI\SOGLIA3_COMBINAZIONI_SPEGN_2019.xlsx"
	dbms = xlsx
	replace;
run;
*/
